// Generated by Dagger (https://dagger.dev).
package com.sayuj.themoviesdb;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.sayuj.themoviesdb.data.localSource.AppDataBase;
import com.sayuj.themoviesdb.data.remoteSource.CustomOkHttpClient;
import com.sayuj.themoviesdb.data.remoteSource.TheMovieDatabaseAPI;
import com.sayuj.themoviesdb.di.AppModule;
import com.sayuj.themoviesdb.di.AppModule_ProvidesAppDataBaseFactory;
import com.sayuj.themoviesdb.di.AppModule_ProvidesOkHttpClientFactory;
import com.sayuj.themoviesdb.di.AppModule_ProvidesTheMovieDatabaseAPIFactory;
import com.sayuj.themoviesdb.di.AppModule_ProvidesTheRepositoryFactory;
import com.sayuj.themoviesdb.di.AppModule_ProvidesTheUseCasesFactory;
import com.sayuj.themoviesdb.domain.repository.TheMovieDbRepository;
import com.sayuj.themoviesdb.domain.useCases.UseCases;
import com.sayuj.themoviesdb.ui.MainActivity;
import com.sayuj.themoviesdb.ui.detail.DetailFragment;
import com.sayuj.themoviesdb.ui.detail.DetailViewModel;
import com.sayuj.themoviesdb.ui.detail.DetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.sayuj.themoviesdb.ui.favorites.FavoritesFragment;
import com.sayuj.themoviesdb.ui.favorites.FavoritesViewModel;
import com.sayuj.themoviesdb.ui.favorites.FavoritesViewModel_HiltModules_KeyModule_ProvideFactory;
import com.sayuj.themoviesdb.ui.home.tabLayoutPages.Popular.PopularFragment;
import com.sayuj.themoviesdb.ui.home.tabLayoutPages.Popular.PopularViewModel;
import com.sayuj.themoviesdb.ui.home.tabLayoutPages.Popular.PopularViewModel_HiltModules_KeyModule_ProvideFactory;
import com.sayuj.themoviesdb.ui.home.tabLayoutPages.nowPlaying.NowPlayingFragment;
import com.sayuj.themoviesdb.ui.home.tabLayoutPages.nowPlaying.NowPlayingViewModel;
import com.sayuj.themoviesdb.ui.home.tabLayoutPages.nowPlaying.NowPlayingViewModel_HiltModules_KeyModule_ProvideFactory;
import com.sayuj.themoviesdb.ui.home.tabLayoutPages.topRated.TopRatedFragment;
import com.sayuj.themoviesdb.ui.home.tabLayoutPages.topRated.TopRatedViewModel;
import com.sayuj.themoviesdb.ui.home.tabLayoutPages.topRated.TopRatedViewModel_HiltModules_KeyModule_ProvideFactory;
import com.sayuj.themoviesdb.ui.home.tabLayoutPages.upComing.UpComgingViewModel;
import com.sayuj.themoviesdb.ui.home.tabLayoutPages.upComing.UpComgingViewModel_HiltModules_KeyModule_ProvideFactory;
import com.sayuj.themoviesdb.ui.home.tabLayoutPages.upComing.UpComingFragment;
import com.sayuj.themoviesdb.ui.search.SearchFragment;
import com.sayuj.themoviesdb.ui.search.SearchViewModel;
import com.sayuj.themoviesdb.ui.search.SearchViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMyApplication_HiltComponents_SingletonC extends MyApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final AppModule appModule;

  private final DaggerMyApplication_HiltComponents_SingletonC singletonC = this;

  private volatile Object appDataBase = new MemoizedSentinel();

  private volatile Object customOkHttpClient = new MemoizedSentinel();

  private volatile Object theMovieDatabaseAPI = new MemoizedSentinel();

  private volatile Object theMovieDbRepository = new MemoizedSentinel();

  private volatile Object useCases = new MemoizedSentinel();

  private DaggerMyApplication_HiltComponents_SingletonC(AppModule appModuleParam,
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.appModule = appModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  private AppDataBase appDataBase() {
    Object local = appDataBase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = appDataBase;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvidesAppDataBaseFactory.providesAppDataBase(appModule, ApplicationContextModule_ProvideApplicationFactory.provideApplication(applicationContextModule));
          appDataBase = DoubleCheck.reentrantCheck(appDataBase, local);
        }
      }
    }
    return (AppDataBase) local;
  }

  private CustomOkHttpClient customOkHttpClient() {
    Object local = customOkHttpClient;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = customOkHttpClient;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvidesOkHttpClientFactory.providesOkHttpClient(appModule);
          customOkHttpClient = DoubleCheck.reentrantCheck(customOkHttpClient, local);
        }
      }
    }
    return (CustomOkHttpClient) local;
  }

  private TheMovieDatabaseAPI theMovieDatabaseAPI() {
    Object local = theMovieDatabaseAPI;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = theMovieDatabaseAPI;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvidesTheMovieDatabaseAPIFactory.providesTheMovieDatabaseAPI(appModule, customOkHttpClient());
          theMovieDatabaseAPI = DoubleCheck.reentrantCheck(theMovieDatabaseAPI, local);
        }
      }
    }
    return (TheMovieDatabaseAPI) local;
  }

  private TheMovieDbRepository theMovieDbRepository() {
    Object local = theMovieDbRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = theMovieDbRepository;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvidesTheRepositoryFactory.providesTheRepository(appModule, appDataBase(), theMovieDatabaseAPI());
          theMovieDbRepository = DoubleCheck.reentrantCheck(theMovieDbRepository, local);
        }
      }
    }
    return (TheMovieDbRepository) local;
  }

  private UseCases useCases() {
    Object local = useCases;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = useCases;
        if (local instanceof MemoizedSentinel) {
          local = AppModule_ProvidesTheUseCasesFactory.providesTheUseCases(appModule, theMovieDbRepository());
          useCases = DoubleCheck.reentrantCheck(useCases, local);
        }
      }
    }
    return (UseCases) local;
  }

  @Override
  public void injectMyApplication(MyApplication myApplication) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private AppModule appModule;

    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public MyApplication_HiltComponents.SingletonC build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerMyApplication_HiltComponents_SingletonC(appModule, applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MyApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public MyApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityRetainedCImpl extends MyApplication_HiltComponents.ActivityRetainedC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;


    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private static final class ActivityCBuilder implements MyApplication_HiltComponents.ActivityC.Builder {
      private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private Activity activity;

      private ActivityCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public MyApplication_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
      }
    }

    private static final class ActivityCImpl extends MyApplication_HiltComponents.ActivityC {
      private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl = this;

      private ActivityCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
      }

      @Override
      public Set<String> getViewModelKeys() {
        return SetBuilder.<String>newSetBuilder(7).add(DetailViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(FavoritesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(NowPlayingViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PopularViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SearchViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(TopRatedViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(UpComgingViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      private static final class FragmentCBuilder implements MyApplication_HiltComponents.FragmentC.Builder {
        private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private Fragment fragment;

        private FragmentCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public MyApplication_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragment);
        }
      }

      private static final class FragmentCI extends MyApplication_HiltComponents.FragmentC {
        private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final FragmentCI fragmentCI = this;

        private FragmentCI(DaggerMyApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            Fragment fragmentParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }

        @Override
        public void injectDetailFragment(DetailFragment detailFragment) {
        }

        @Override
        public void injectFavoritesFragment(FavoritesFragment favoritesFragment) {
        }

        @Override
        public void injectPopularFragment(PopularFragment popularFragment) {
        }

        @Override
        public void injectNowPlayingFragment(NowPlayingFragment nowPlayingFragment) {
        }

        @Override
        public void injectTopRatedFragment(TopRatedFragment topRatedFragment) {
        }

        @Override
        public void injectUpComingFragment(UpComingFragment upComingFragment) {
        }

        @Override
        public void injectSearchFragment(SearchFragment searchFragment) {
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return activityCImpl.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI);
        }

        private static final class ViewWithFragmentCBuilder implements MyApplication_HiltComponents.ViewWithFragmentC.Builder {
          private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private View view;

          private ViewWithFragmentCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;
          }

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public MyApplication_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI, view);
          }
        }

        private static final class ViewWithFragmentCI extends MyApplication_HiltComponents.ViewWithFragmentC {
          private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private final ViewWithFragmentCI viewWithFragmentCI = this;

          private ViewWithFragmentCI(DaggerMyApplication_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI, View viewParam) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;


          }
        }
      }

      private static final class ViewCBuilder implements MyApplication_HiltComponents.ViewC.Builder {
        private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private View view;

        private ViewCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public MyApplication_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(singletonC, activityRetainedCImpl, activityCImpl, view);
        }
      }

      private static final class ViewCI extends MyApplication_HiltComponents.ViewC {
        private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final ViewCI viewCI = this;

        private ViewCI(DaggerMyApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            View viewParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }
      }
    }

    private static final class ViewModelCBuilder implements MyApplication_HiltComponents.ViewModelC.Builder {
      private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private SavedStateHandle savedStateHandle;

      private ViewModelCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public MyApplication_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
      }
    }

    private static final class ViewModelCImpl extends MyApplication_HiltComponents.ViewModelC {
      private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl = this;

      private volatile Provider<DetailViewModel> detailViewModelProvider;

      private volatile Provider<FavoritesViewModel> favoritesViewModelProvider;

      private volatile Provider<NowPlayingViewModel> nowPlayingViewModelProvider;

      private volatile Provider<PopularViewModel> popularViewModelProvider;

      private volatile Provider<SearchViewModel> searchViewModelProvider;

      private volatile Provider<TopRatedViewModel> topRatedViewModelProvider;

      private volatile Provider<UpComgingViewModel> upComgingViewModelProvider;

      private ViewModelCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      private DetailViewModel detailViewModel() {
        return new DetailViewModel(singletonC.useCases());
      }

      private Provider<DetailViewModel> detailViewModelProvider() {
        Object local = detailViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
          detailViewModelProvider = (Provider<DetailViewModel>) local;
        }
        return (Provider<DetailViewModel>) local;
      }

      private FavoritesViewModel favoritesViewModel() {
        return new FavoritesViewModel(singletonC.useCases());
      }

      private Provider<FavoritesViewModel> favoritesViewModelProvider() {
        Object local = favoritesViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
          favoritesViewModelProvider = (Provider<FavoritesViewModel>) local;
        }
        return (Provider<FavoritesViewModel>) local;
      }

      private NowPlayingViewModel nowPlayingViewModel() {
        return new NowPlayingViewModel(singletonC.useCases());
      }

      private Provider<NowPlayingViewModel> nowPlayingViewModelProvider() {
        Object local = nowPlayingViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
          nowPlayingViewModelProvider = (Provider<NowPlayingViewModel>) local;
        }
        return (Provider<NowPlayingViewModel>) local;
      }

      private PopularViewModel popularViewModel() {
        return new PopularViewModel(singletonC.useCases());
      }

      private Provider<PopularViewModel> popularViewModelProvider() {
        Object local = popularViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
          popularViewModelProvider = (Provider<PopularViewModel>) local;
        }
        return (Provider<PopularViewModel>) local;
      }

      private SearchViewModel searchViewModel() {
        return new SearchViewModel(singletonC.useCases());
      }

      private Provider<SearchViewModel> searchViewModelProvider() {
        Object local = searchViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
          searchViewModelProvider = (Provider<SearchViewModel>) local;
        }
        return (Provider<SearchViewModel>) local;
      }

      private TopRatedViewModel topRatedViewModel() {
        return new TopRatedViewModel(singletonC.useCases());
      }

      private Provider<TopRatedViewModel> topRatedViewModelProvider() {
        Object local = topRatedViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 5);
          topRatedViewModelProvider = (Provider<TopRatedViewModel>) local;
        }
        return (Provider<TopRatedViewModel>) local;
      }

      private UpComgingViewModel upComgingViewModel() {
        return new UpComgingViewModel(singletonC.useCases());
      }

      private Provider<UpComgingViewModel> upComgingViewModelProvider() {
        Object local = upComgingViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 6);
          upComgingViewModelProvider = (Provider<UpComgingViewModel>) local;
        }
        return (Provider<UpComgingViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(7).put("com.sayuj.themoviesdb.ui.detail.DetailViewModel", (Provider) detailViewModelProvider()).put("com.sayuj.themoviesdb.ui.favorites.FavoritesViewModel", (Provider) favoritesViewModelProvider()).put("com.sayuj.themoviesdb.ui.home.tabLayoutPages.nowPlaying.NowPlayingViewModel", (Provider) nowPlayingViewModelProvider()).put("com.sayuj.themoviesdb.ui.home.tabLayoutPages.Popular.PopularViewModel", (Provider) popularViewModelProvider()).put("com.sayuj.themoviesdb.ui.search.SearchViewModel", (Provider) searchViewModelProvider()).put("com.sayuj.themoviesdb.ui.home.tabLayoutPages.topRated.TopRatedViewModel", (Provider) topRatedViewModelProvider()).put("com.sayuj.themoviesdb.ui.home.tabLayoutPages.upComing.UpComgingViewModel", (Provider) upComgingViewModelProvider()).build();
      }

      private static final class SwitchingProvider<T> implements Provider<T> {
        private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ViewModelCImpl viewModelCImpl;

        private final int id;

        SwitchingProvider(DaggerMyApplication_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.viewModelCImpl = viewModelCImpl;
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.sayuj.themoviesdb.ui.detail.DetailViewModel 
            return (T) viewModelCImpl.detailViewModel();

            case 1: // com.sayuj.themoviesdb.ui.favorites.FavoritesViewModel 
            return (T) viewModelCImpl.favoritesViewModel();

            case 2: // com.sayuj.themoviesdb.ui.home.tabLayoutPages.nowPlaying.NowPlayingViewModel 
            return (T) viewModelCImpl.nowPlayingViewModel();

            case 3: // com.sayuj.themoviesdb.ui.home.tabLayoutPages.Popular.PopularViewModel 
            return (T) viewModelCImpl.popularViewModel();

            case 4: // com.sayuj.themoviesdb.ui.search.SearchViewModel 
            return (T) viewModelCImpl.searchViewModel();

            case 5: // com.sayuj.themoviesdb.ui.home.tabLayoutPages.topRated.TopRatedViewModel 
            return (T) viewModelCImpl.topRatedViewModel();

            case 6: // com.sayuj.themoviesdb.ui.home.tabLayoutPages.upComing.UpComgingViewModel 
            return (T) viewModelCImpl.upComgingViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private static final class ServiceCBuilder implements MyApplication_HiltComponents.ServiceC.Builder {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerMyApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ServiceCImpl extends MyApplication_HiltComponents.ServiceC {
    private final DaggerMyApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerMyApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }
}
