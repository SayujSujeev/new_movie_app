// Generated by Dagger (https://dagger.dev).
package com.sayuj.themoviesdb.di;

import com.sayuj.themoviesdb.domain.repository.TheMovieDbRepository;
import com.sayuj.themoviesdb.domain.useCases.UseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvidesTheUseCasesFactory implements Factory<UseCases> {
  private final AppModule module;

  private final Provider<TheMovieDbRepository> repositoryProvider;

  public AppModule_ProvidesTheUseCasesFactory(AppModule module,
      Provider<TheMovieDbRepository> repositoryProvider) {
    this.module = module;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public UseCases get() {
    return providesTheUseCases(module, repositoryProvider.get());
  }

  public static AppModule_ProvidesTheUseCasesFactory create(AppModule module,
      Provider<TheMovieDbRepository> repositoryProvider) {
    return new AppModule_ProvidesTheUseCasesFactory(module, repositoryProvider);
  }

  public static UseCases providesTheUseCases(AppModule instance, TheMovieDbRepository repository) {
    return Preconditions.checkNotNullFromProvides(instance.providesTheUseCases(repository));
  }
}
